---
title: "Entrega grupal"
author: "C. Tangana (DNI: 00000000-X), Rosalía (DNI: 00000000-X), ..."
format:
  revealjs:
    theme: [style.scss]
    embed-resources: true
execute: 
  echo: true
---

## Paquetes necesarios

> Insertad aquí todos los paquetes vayáis necesitando

```{r, message=FALSE}
#| include: false
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(gapminder)
library(ggthemes)
library(plotly)
library(ggThemeAssist)
library(ggridges)
library(ggtext)
library(waffle)
library(glue)
library(lubridate)
library(forcats)
library(readr)
library(stringr)
```

------------------------------------------------------------------------

## Entrega grupal

### Datos

La práctica se basará en los [**archivos de datos electorales**]{.hl-yellow} que se indican a continuación, recopilando datos sobre las elecciones al Congreso de los Diputados en España desde 2008 hasta la actualidad, así como encuestas, códigos de municipios y abreviaturas

```{r}
#| include: false
# NO TOQUES NADA
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./data/cod_mun.csv")
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
```

------------------------------------------------------------------------

## Datos

-   `election_data`: archivo con las elecciones al congreso
-   `cod_mun`: archivo con los códigos y nombres de cada municipio
-   `abbrev`: siglas de cada partido
-   `surveys`: encuestas electorales desde 1982.

------------------------------------------------------------------------

## Datos

-   `surveys`: encuestas electorales desde 1982.
    -   `type_survey`: tipo de encuesta (nacional, regional...)
    -   `date_elec`: fecha de las futuras elecciones
    -   `id_pollster`, `pollster`, `media`: id y nombre de la empresa encuestadora, así como medio que la encargó
    -   `field_date_from`, `field_date_to`: fechas de inicio y fin del trabajo de la encuesta
    -   `exit_poll`: ¿es una encuesta a pie de urna?
    -   `size`: tamaño muestral de la encuesta
    -   `turnout`: participación (estimación)

------------------------------------------------------------------------

## Nuevos datos

Transformamos `cod_mun`

```{r}
cod_tidy <- cod_mun |> 
  # Nos quedamos con los últimos 3 dígitos
  mutate(cod_mun = str_sub(cod_mun, - 3)) |> 
  # Eliminamos los nombres de los municipios repetidos
  distinct(cod_mun, .keep_all = TRUE)
```

Transformamos `abbrev`

```{r}
abbrev_tidy <- abbrev |>
  # Eliminamos los nombres de partidos repetidos
  distinct(denominacion) |> 
  # Renombramos las coaliciones para que tengan las mismas siglas
  mutate(siglas = case_when(
    str_detect(denominacion, "PARTIDO SOCIALISTA") ~ "PSOE",
    str_detect(denominacion, "PARTIDO POPULAR") ~ "PP",
    str_detect(denominacion, "CIUDADANOS") ~ "CS",
    str_detect(denominacion, "PARTIDO NACIONALISTA VASCO") ~ "EAJ-PNV",
    str_detect(denominacion, "BLOQUE NACIONALISTA GALEGO") ~ "BNG",
    str_detect(denominacion, "UNIDAS PODEMOS|UNIDOS PODEMOS|PODEMOS|IU|PODEM|EZKER BATUA") ~ "PODEMOS",
   str_detect(denominacion, "ESQUERRA REPUBLICANA DE CATALUNYA") ~ "ERC",
   str_detect(denominacion, "EH - BILDU|SORTU|EUSKO ALKARTASUNA|ARALAR|ALTERNATIBA") ~ "EH-BILDU",
   str_detect(denominacion, "VOX") ~ "VOX",
   TRUE ~ "OTROS"
   ))
```

Transformamos `election_data`.

```{r}
# Extraemos el nombre de los partidos (todos están en mayúsculas)
cols_election <- names(election_data)[str_detect(names(election_data), 
                                                 pattern = "[A-Z]")]

election_tidy <- election_data |> 
  pivot_longer(cols = all_of(cols_election), 
               names_to = "partido", 
               values_to = "votos", 
               values_drop_na = TRUE) |> 
  # Añadimos las siglas
  inner_join(abbrev_tidy, by = c("partido" = "denominacion")) |> 
  relocate(siglas, .after = partido) |> 
  # Añadimos los nombres de los municipio
  inner_join(cod_tidy, by = c("codigo_municipio" = "cod_mun")) |> 
  relocate(municipio, .after = codigo_municipio) |> 
  # Quitamos columnas que no aportan informacion 
  select(-tipo_eleccion, -vuelta, - codigo_distrito_electoral)
```

Transformamos `surveys`

```{r}
# Extraemos las siglas de los partidos (todos están en mayúsculas)
cols_surveys <- names(surveys)[str_detect(names(surveys), pattern = "[A-Z]")]

# Creamos un vector con las siglas de los partidos que nos interesan
siglas_interes <- c("PSOE", "PP", "EAJ-PNV", "BNG", "PODEMOS", "ERC", "EH-BILDU", "VOX","CS")

surveys_tidy <- surveys |> 
  pivot_longer(cols = all_of(cols_surveys), names_to = "siglas", 
               values_to = "votos", values_drop_na = TRUE) |> 
  # Eliminamos los registros no deseados
  ## Elecciones de antes de 2008
  filter(year(date_elec) >= 2008) |> 
  ## Encuentas a pie de urna
  filter(!exit_poll == TRUE) |> 
  ## Tamaño muestral inferior a 500
  filter(!size < 500) |> 
  ## Trabajo de campo que duró 1 día o menos
  filter(!field_date_to - field_date_from <= 1) |> 
  mutate(siglas = if_else(siglas %in% siglas_interes, siglas, "OTROS"))
```

## Pregunta 1

***Qué partido fue el ganador en los municipios con más de 100.000 habitantes (censo) en cada una de las elecciones?***

```{r, message=FALSE}
#| include: false
# install.packages("mapSpain", dependencies = TRUE)
extrafont::loadfonts()
```

```{r}
municipio <- election_tidy |> 
  filter(censo >= 100000) |> 
  group_by(municipio, anno, mes) |> 
  slice_max(votos, with_ties = FALSE)
  
```

```{r}
#creamos la paleta de colores para cada partido
colores_partidos <- c("#d80000","#3399FF","#6fab58","#77b4de","#6D50B3","#f3c54b","#00d0b6","#74cb4c","#FF5824","#a9a9a9")
colores_df <- data.frame( siglas = c(siglas_interes, "OTROS"), 
                          color = colores_partidos)
municipio <- municipio |> 
  left_join(colores_df, by = "siglas")
```

```{r}
theme_gg <- theme_minimal(base_size = 14, base_family = "Times New Roman") +
  theme(
    axis.text = element_text(family = "Times New Roman"),
    axis.text.x = element_text(angle = 90, hjust = 1, size = 9),
    axis.title = element_text(size = 11),
    axis.text.y = element_text(size = 9),
    legend.position = "right",
    plot.title = element_text(face = "bold"),
    plot.subtitle = element_text(size = 9),
    legend.title = element_text(size = 11),
    legend.text = element_text(size = 9),
    panel.border = element_blank(), 
    axis.line = element_line(), 
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank())

pregunta1 <- ggplot(municipio, aes(x = municipio, y = votos, fill = siglas)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ anno + mes) +
  scale_fill_manual(values = setNames(colores_partidos, 
                                      c(siglas_interes, "OTROS"))) +
  labs(title = "Partido político vencedor en las elecciones por municipio",
       subtitle = "Representación por año de las elecciones",
       x = "Municipio",
       y = "Votos",
       fill = "Partido Político") +
  theme_gg

```

```{r}
plotly:: ggplotly(pregunta1)
```

### Diagrama de España

Se tiene que instalar los siguientes paquetes y se necesita la información de los municipios, que se encuentra dentro de la carpeta "`Municipios_-754961474048907967`"

```{r, message=FALSE}
#| include: false
# Instalar paquetes si no lo has hecho
install.packages("sf")
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")

# Cargar los paquetes
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)

```

```{r}
#| include: false
# Obtener los datos de los países
world <- ne_countries(scale = "medium", returnclass = "sf")
# Filtrar los datos para obtener solo España
spain <- world[world$name == "Spain", ]

municipio_info <- st_read("Municipios_-754961474048907967/Municipios_IGN.shp")
municipio_info <- as.data.frame(municipio_info)

# Transformar a WGS 84 si es necesario (puedes omitir este paso si ya está en 4326)
municipio_info <- st_transform(municipio_info, crs = 4326)
```

EPSG:4326 es una norma reconocida internacionalmente, lo que facilita el intercambio de datos geoespaciales entre diferentes organizaciones, instituciones y plataformas.

```{r}
# Crear el mapa de España con los municipios usando geom_sf
ggplot(municipio_info) +
  geom_sf(aes(fill = NAMEUNIT), color = "black", size = 0.1) +
  coord_sf() +
  labs(title = "Mapa de Municipios de España",
       fill = "Municipio") +
  theme_minimal() +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())

```

# Pregunta 2

**¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuando el primero fue el PP?**

```{r}
# Agrupamos el mes y el año en election_tidy
election_tidy <- election_tidy |> 
  mutate(fecha = paste0(mes, "-", anno)) |> 
  relocate(fecha, .after = mes)

election_summary <- election_tidy |>
  summarise(total_voto = sum(votos, na.rm = TRUE), .by = c(fecha, siglas)) |> 
    arrange(desc(total_voto)) |> 
    mutate(rank = row_number(), .by = fecha) |> 
  mutate(fecha = factor(fecha, levels = c("03-2008", "11-2011", "12-2015", "06-2016", "04-2019", "11-2019")))

segundo_PSOE <- election_summary |> 
  filter(rank == 1 & siglas == "PSOE") |> 
  inner_join(election_summary |> filter(!rank == 1), by = "fecha") |> 
  pivot_longer(cols = c(siglas.x, siglas.y, total_voto.x, total_voto.y, rank.x, rank.y),
               names_to = c(".value", "type"),
               names_pattern = "(.*)\\.(.*)") |> 
  select(!type) |> 
  distinct() |> 
  mutate(segundo = if_else(rank == 2, "Si", "No")) |> 
  mutate(siglas = fct_reorder(siglas, rank), .by = fecha) |> 
  mutate(fecha = factor(fecha, levels = c("03-2008", "11-2011", "12-2015", "06-2016", "04-2019", "11-2019")))

segundo_PP <- election_summary |> 
  filter(rank == 1 & siglas == "PP") |> 
  inner_join(election_summary |> filter(!rank == 1), by = "fecha") |> 
  pivot_longer(cols = c(siglas.x, siglas.y, total_voto.x, total_voto.y, rank.x, rank.y),
               names_to = c(".value", "type"),
               names_pattern = "(.*)\\.(.*)") |> 
  select(!type) |> 
  distinct() |> 
  mutate(segundo = if_else(rank == 2, "Si", "No")) |> 
  mutate(siglas = fct_reorder(siglas, total_voto))
```

```{r, warning = FALSE}
ggplot(data = segundo_PSOE, aes(x = fecha, y = total_voto, fill = fct_reorder(siglas, rank), alpha = segundo)) +
  geom_col(position = "dodge2") +
  scale_fill_manual(
    values = setNames(colores_partidos, c(siglas_interes, "OTROS"))) +
  scale_alpha_manual(values = c("Si" = 1, "No" = 0.15)) +
  scale_y_continuous(
    breaks = seq(0, max(segundo_PSOE$total_voto), by = 1000000), 
    labels = scales::comma_format()) +
  guides(alpha = "none") +
  theme_gg +
  theme(axis.text.x = element_text(angle = 0)) +
  labs(title = "Distribución de los votos cuando el PSOE fue el primero",
       x = "Fecha", y = "Total de votos", fill = "Partido")

ggplot(data = segundo_PP, aes(x = fecha, y = total_voto, fill = fct_reorder(siglas, rank), alpha = segundo)) +
  geom_col(position = "dodge2") +
  scale_fill_manual(
    values = setNames(colores_partidos, c(siglas_interes, "OTROS"))) +
  scale_alpha_manual(values = c("Si" = 1, "No" = 0.15)) +
  scale_y_continuous(
    breaks = seq(0, max(segundo_PP$total_voto), by = 1000000), 
    labels = scales::comma_format()) +
  guides(alpha = "none") +
  theme_gg +
  theme(axis.text.x = element_text(angle = 0)) +
  labs(title = "Distribución de los votos cuando el PP fue el primero",
       x = "Fecha", y = "Total de votos", fill = "Partido")
```

```{r}
segundo_PSOE |> filter(rank == 2) |> select(fecha, siglas, total_voto) |> arrange(fecha)
segundo_PP |> filter(rank == 2) |> select(fecha, siglas, total_voto) |> arrange(fecha)
```

# Pregunta 3

**¿Cómo calibrar el error de las encuestas?**

-- unificar el resultado a nivel nacional de los votos con el resultado de las necuestas

```{r}
elect_surv <-
  right_join(
    # primero hay que resumin la información de interés de los vosotos a nivel nacional
    election_tidy |> 
    select(anno, mes, codigo_municipio, censo, votos, partido, siglas, participacion_1, participacion_2) |> 
    summarise(censo = sum(unique(censo)),
              participacion = sum(unique(participacion_1)) + sum(unique(participacion_2)),
              .by = c("anno", "mes")) |> 
    right_join(election_tidy |> 
                 summarise(votos = sum(votos),
                 .by = c("anno", "mes", "siglas")),
               by = c("anno", "mes")) |> 
    mutate(porc_votos = (votos/participacion) * 100,
           mes = as.numeric(mes)),
    surveys_tidy |> 
      rename(intencion = votos) |> 
      # hay que unificar (sumando sus proporciones) la intención de voto de todos los partidos que se han denominado como OTROS
      mutate(intencion = sum(intencion),
              .by = c(siglas, date_elec, id_pollster, media, field_date_from, field_date_to)) |> 
      distinct() |> 
      mutate(mes = month(date_elec),
             anno = year(date_elec)),
    by = c("anno", "mes", "siglas"))
```


identificador de encuestas: anno, mes, media, field_date_from



-- decidir cómo respresentar la intención global de voto y calcular las diferencias entre proporción estimada (surveys) y proporción real (votos)

se atiende primero a la calidad de los datos de las encuestas en cuestión a si existen en todos los periodos electorales

```{r}
elect_surv |> 
  count(media, date_elec) |> 
  arrange(date_elec, media) |> 
  pivot_wider(values_from = n, id_cols = media, names_from = date_elec)
```

se puede ver también que no se tiene representación de la intención de voto de todos los partidos para todos lo periodos electorales

```{r}
elect_surv |> 
  count(siglas, date_elec) |> 
  arrange(date_elec, siglas) |> 
  pivot_wider(values_from = n, id_cols = siglas, names_from = date_elec)
```


a la vista de los resultados, se decide atender a los siguientes análisis para la estimación de la precisión de las encuestas electorales

> comparación de la intención de voto global entendida como la proporción de todas las encuestas de todos los medios para cada periodo electoral

```{r}
intencion_global <-
# primero se resume la información de cada medio 
elect_surv |> 
  summarise(intencion = mean(intencion),
            .by = c("date_elec", "media", "siglas")) |> 
# después, se extrae la media global para cada periodo electoral
  summarise(intencion = mean(intencion),
            .by = c("date_elec", "siglas")) |> 
# se añade la información resumida anteriormente de los votos reales obtenidos por cada partido
  left_join(elect_surv |> 
              select(porc_votos, date_elec, siglas) |> 
              distinct(),
            by = c("date_elec", "siglas")) |> 
# los periodos en los que no se tiene porcentaje de votos registrado, se entiende que ese fue 0
  mutate(porc_votos = if_else(is.na(porc_votos), 0, porc_votos)) |> 
# por último, se calcula la diferencia entre el porcentaje estimado y el porcentaje obtenido como estimador de la precisión de las encuestas
  mutate(diferencia = intencion - porc_votos)

# se construye una representación gráfica del error para cada partdio en cada periodo

ggplot(intencion_global) +
  geom_col(aes(y = diferencia, 
               x = date_elec, 
               fill = siglas),
           position = "dodge", width = 200) +
           scale_x_date(breaks = unique(intencion_global$date_elec)) +
  theme(axis.text.x = element_text(angle = 90))
```


- mismo análisis pero dando peso a cada encuesta de cada medio en función de su tamaño muestral

> comparación de la precisión de los medios que tienen datos para todos los periodos electorales de manera global y para cada periodo

(media de las diferecias para el comparador global)
(diferencias año a año para lo de los periodos)

> ¿las encuestas más próximas al día de las elecciones son más fiables?

